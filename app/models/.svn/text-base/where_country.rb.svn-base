class WhereCountry < ActiveRecord::Base
	has_many :where_country_factors,
			:dependent => :destroy
	has_many :where_factors,
			:dependent => :nullify

	@@json_mapping_table = {
	"view_name"        => {:value => "Where-Countries", :type => :TITLE},
	"name"             => {:value => "name", :type => :DB_FIELD},
	"description"      => {:value => "description", :type => :DB_FIELD},
	"view_countries"   => {:value => "Countries", :type => :TITLE },
	"countries"        => {:value => "@where_country_factors", :type => :HAS_CHILD_MULTI}
	}

	def self.json_mapping_table
		return @@json_mapping_table
	end 


	###########################################
	### CONDITION_WHERE_COUNTRY
	#[RULESET_CONDITION_WHERE_COUNTRY]
	#country, enum
	#[CONDITION_WHERE_COUNTRY]
	# country_1: country = ( 1, 2, 3, 4, 5 )
	# country_2: country = ( 4, 5, 6 )
	###########################################
	def data_to_ruleset
		items = []
		self.where_country_factors.each do |factor|
			items << "'" + factor.country_code + "'"
		end

		if items.size > 0
			return self.subfctr_name + ": country = (" + items.join(",") + ")" 
		else
			return ""
		end
	end 
end

